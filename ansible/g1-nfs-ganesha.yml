---
- shell: /bin/bash -c 'echo "  Configuring services..." > {{ fifo}}'

- name: Stop kernel NFS
  service: name=nfs-server state=stopped

- name: Disable kernel NFS
  service: name=nfs-server enabled=no

- name: Start network service
  service: name=network state=started

- name: Enable network service
  service: name=network enabled=yes

- name: Stop network manager service
  service: name=NetworkManager state=stopped
  ignore_errors: true

- name: Disable network manager service
  service: name=NetworkManager enabled=no
  ignore_errors: true

- name: Start pcsd service
  service: name=pcsd state=started

- name: Enable pcsd service
  service: name=pcsd enabled=yes

- name: Enable pacemaker service
  service: name=pacemaker enabled=yes

- name: Enable glusterfssharedstorage service
  service: name=glusterfssharedstorage enabled=yes

- name: Enable nfs-ganesha service
  service: name=nfs-ganesha enabled=yes

- name: Define service port
  lineinfile:
    dest: /etc/sysconfig/nfs
    regexp: '^#STATD_PORT=.*'
    line: 'STATD_PORT=662'

- name: Restart nfs-config service
  service:
    name: nfs-config
    state: restarted
  ignore_errors: true

- name: Restart rpc-statd service
  service:
    name: rpc-statd
    state: restarted
  ignore_errors: true

- shell: /bin/bash -c 'echo "  Enabling shared storage volume..." > {{ fifo}}'

  #FIXME: We shouldn't ignore the errors, here. A failure enabling the shared
  #       storage volume will break remaining NFS-Ganesha plays
- name: Enable Gluster shared storage volume
  delegate_to: 127.0.0.1
  run_once: true
  volume_set:
    action: set
    volume: all
    key: cluster.enable-shared-storage
    value: enable
  ignore_errors: true

- shell: /bin/bash -c 'echo "  Authenticating HA cluster..." > {{ fifo}}'

- name: Generate hacluster password
  run_once: true
  no_log: true
  set_fact:
    hacluster_password: "{{ lookup('password', '/dev/null') }}"

- name: Create a user hacluster in all the cluster nodes if not already present
  no_log: true
  user:
    name: hacluster
    password: "{{ hacluster_password | password_hash('sha512') }}"

- name: Build host list for pcs cluster auth
  delegate_to: 127.0.0.1
  run_once: true
  set_fact:
    pcs_hosts: "{{ ha_cluster_nodes.split(',') | join(' ') }}"

- name: Pcs cluster authenticate the hacluster users in all the nodes
  delegate_to: 127.0.0.1
  run_once: true
  no_log: true
  shell: "echo '{{ hacluster_password }}' | pcs cluster auth -u hacluster {{ pcs_hosts }}"
  register: result

- name: Pause for a few seconds after pcs auth
  pause: seconds=3

- shell: /bin/bash -c 'echo "  Generating and distributing root SSH keys..." > {{ fifo}}'

- name: Generate ssh key in one of the nodes in HA cluster
  delegate_to: 127.0.0.1
  run_once: true
  shell: echo -e  'y\n'|ssh-keygen -q -t rsa -N "" -f /var/lib/glusterd/nfs/secret.pem

- name: Copy the public key to remote nodes
  copy:
    src: "/var/lib/glusterd/nfs/secret.pem.pub"
    dest: "/var/lib/glusterd/nfs/secret.pem.pub"
    mode: 0644

- name: Copy the private key to remote node
  copy:
    src: "/var/lib/glusterd/nfs/secret.pem"
    dest: "/var/lib/glusterd/nfs/secret.pem"
    mode: 0600

- name: Create /root/.ssh directory
  file:
    path: "/root/.ssh"
    state: directory

- name: Deploy the pubkey ~/root/.ssh/authorized_keys on all nodes
  shell: 'cat /var/lib/glusterd/nfs/secret.pem.pub >> ~/.ssh/authorized_keys'

- shell: /bin/bash -c 'echo "  Populating NFS-Ganesha configuration..." > {{ fifo}}'

- name: Create configuration directory for nfs-ganesha
  delegate_to: 127.0.0.1
  run_once: true
  file:
    path: "{{ ha_base_dir }}"
    state: directory

- name: Create copy of local ganesha config file
  copy:
    remote_src: yes
    src: /etc/ganesha/ganesha.conf
    dest: /etc/ganesha/ganesha.conf.orig
  ignore_errors: true

- name: Copy ganesha config file to directory on shared volume
  delegate_to: 127.0.0.1
  run_once: true
  copy:
    remote_src: yes
    src: /etc/ganesha/ganesha.conf.orig
    dest: "{{ ha_base_dir }}/ganesha.conf"
    force: no

#-- Below two plays are a hack to temporarily address bz1546748

- name: Remove default NFS Ganesha config file
  file:
    path: /etc/ganesha/ganesha.conf
    state: absent

- name: Link NFS Ganesha config file to shared storage
  file:
    src: '{{ ha_base_dir }}/ganesha.conf'
    path: /etc/ganesha/ganesha.conf
    state: link
  register: result
  until: result.state == 'link'
  retries: 5

#--

- name: Create VIP entries variable for ganesha-ha.conf
  delegate_to: 127.0.0.1
  run_once: true
  set_fact:
    vip_entries: |
      {{ vip_entries | default() }}
      {{ item }}
  with_items: "{{ vip_list }}"

- name: Creating ganesha-ha.conf file
  delegate_to: 127.0.0.1
  run_once: true
  template:
    src: g1-ganesha-ha.j2
    dest: "{{ ha_base_dir }}/ganesha-ha.conf"

- shell: /bin/bash -c 'echo "  Enabling NFS-Ganesha services..." > {{ fifo}}'

  #NOTE: It is important that this runs on a node that is
  #      configured to host one of the VIPs
- name: Enable nfs-ganesha
  delegate_to: "{{ vip_hosts[0] }}"
  run_once: true
  shell: |
    gluster nfs-ganesha disable --mode=script
    gluster nfs-ganesha enable --mode=script
    sleep 30
    /usr/libexec/ganesha/ganesha-ha.sh --status "{{ ha_base_dir }}"
  register: result
  failed_when:
    - "'HEALTHY' not in result.stdout"
  retries: 3
  ignore_errors: true

- shell: /bin/bash -c 'echo "  WARNING - NFS-Ganesha did not start successfully..." > {{ fifo }}'
  when: "'HEALTHY' not in result.stdout"

- name: Start nfs-ganesha service
  service: name=nfs-ganesha state=started

- name: Export default volume with NFS-Ganesha
  delegate_to: 127.0.0.1
  run_once: true
  volume_set:
    action: set
    volume: "{{ default_volname }}"
    key: "ganesha.enable"
    value: "on"
